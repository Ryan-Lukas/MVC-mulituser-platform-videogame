<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ScoreBoardPicture.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YII=
</value>
  </data>
</root>